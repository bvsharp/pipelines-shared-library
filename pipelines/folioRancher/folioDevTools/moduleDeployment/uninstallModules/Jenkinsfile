#!groovy
import org.folio.models.OkapiTenant
import org.folio.models.RancherNamespace
import org.folio.rest_v2.Main
import org.folio.rest_v2.Authorization
import org.folio.utilities.RestClient
import org.jenkinsci.plugins.workflow.libs.Library
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder

@Library('pipelines-shared-library@RANCHER-741-Jenkins-Enhancements') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.tenantId(''),
    string(name: 'MODULE_NAME', defaultValue: '', description: '(REQUIRED) Module names separated by comma', trim: true),
    folioParameters.agent(),
    folioParameters.refreshParameters()
    ])
])

def CLUSTER_URL = params.CLUSTER
def NAMESPACE_URL = params.NAMESPACE
def TENANT_URL = params.TENANT_ID

if (params.REFRESH_PARAMETERS) {
   currentBuild.result = 'ABORTED'
   error('DRY RUN BUILD, PARAMETERS REFRESHED!')
}

RancherNamespace namespace = new RancherNamespace(params.CLUSTER, params.NAMESPACE)
  .withSuperTenantAdminUser()

Main main = new Main(this, namespace.getDomains()['okapi'], namespace.getSuperTenant())

if (!main.isTenantExist(params.TENANT_ID)) {
  currentBuild.result = 'ABORTED'
  error('Tenant does not exist, aborting the pipeline')
}

if (params.MODULE_NAME.trim() == '') {
    currentBuild.result = 'ABORTED'
    error('MODULE_NAME parameter cannot be empty, aborting the pipeline')
}

def inputString = params.MODULE_NAME
def modules = []
def values = []
def tmp_values = inputString.split(",").each { it -> modules.add(it.trim()) }
String url = "https://${CLUSTER_URL}-${NAMESPACE_URL}-okapi.ci.folio.org/_/proxy/tenants/${TENANT_URL}/modules"
println("URL: " + url)

try {
    Map headers = new Authorization(this, namespace.generateDomain('okapi')).getAuthorizedHeaders(namespace.getSuperTenant())
    def get_request = new RestClient(this).get(url, headers)
    def jsonText = get_request.body
    def json = jsonText instanceof String ? new JsonSlurperClassic().parseText(jsonText) : jsonText
    println("JSON: " + json) //debug
    modules.each { module ->
        try {
            if ( json.find { it.id =~ module }) {
                def tmp = json.find { it.id =~ module }
                tmp['action']='disable'
                values.add(tmp)
            }
        } catch (Exception e) {
            println(e.getMessage())
        }
    }
    println(values)
} catch (Exception e) {
    println "Error: ${e.message}"
}

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${namespace.getClusterName()}-${namespace.getNamespaceName()}.${env.BUILD_ID}"
        buildDescription "Tenant: ${params.TENANT_ID}"
      }
      stage("Purge tenant modules") {
        String postUrl = "https://${CLUSTER_URL}-${NAMESPACE_URL}-okapi.ci.folio.org/_/proxy/tenants/${TENANT_URL}/install?purge=true"
        println("POST_URL: " + postUrl)
        Map headers = new Authorization(this, namespace.generateDomain('okapi')).getAuthorizedHeaders(namespace.getSuperTenant())
        def body = values
        def post_request = new RestClient(this).post(postUrl, new JsonBuilder(body).toString(), headers)
        println("POST_REQUEST: " + post_request)
        def jsonText = post_request.body
        println("RESPONSE: " + jsonText)
      }
    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}