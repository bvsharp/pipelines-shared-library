#!groovy
import org.folio.models.OkapiTenant
import org.folio.models.RancherNamespace
import org.folio.rest_v2.Main
import org.jenkinsci.plugins.workflow.libs.Library
import groovy.json.JsonSlurperClassic
import java.net.URL
import org.folio.utilities.RestClient

@Library('pipelines-shared-library@RANCHER-741-Jenkins-Enhancements') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.tenantId(''),
    string(name: 'MODULE_NAME', defaultValue: '', description: '(REQUIRED) Module names separated by comma', trim: true),
    folioParameters.agent(),
    folioParameters.refreshParameters()])
])

def CLUSTER_URL = params.CLUSTER
def NAMESPACE_URL = params.NAMESPACE
def TENANT_URL = params.TENANT_ID

if (params.REFRESH_PARAMETERS) {
   currentBuild.result = 'ABORTED'
   error('DRY RUN BUILD, PARAMETERS REFRESHED!')
}

RancherNamespace namespace = new RancherNamespace(params.CLUSTER, params.NAMESPACE)
  .withSuperTenantAdminUser()

Main main = new Main(this, namespace.getDomains()['okapi'], namespace.getSuperTenant())

if (!main.isTenantExist(params.TENANT_ID)) {
  currentBuild.result = 'ABORTED'
  error('Tenant does not exist, aborting the pipeline')
}

if (params.MODULE_NAME.trim() == '') {
    currentBuild.result = 'ABORTED'
    error('MODULE_NAME parameter cannot be empty, aborting the pipeline')
}

def inputString = params.MODULE_NAME
def moduleList = inputString.split(',').collect { "\"${it.trim()}\"" }

def test = []
def values = []
def tmp_values = inputString.split(",").each { it -> test.add(it.trim()) }
def url = new URL("https://${CLUSTER_URL}-${NAMESPACE_URL}-okapi.ci.folio.org/_/proxy/tenants/${TENANT_URL}/modules")
println(url)

try {
    def connection = url.openConnection()
    connection.setRequestProperty('Accept', 'application/json')

    Map headers = Authorization(this,namespace.generateDomain('okapi')).getAuthorizedHeaders(namespace.getSuperTenant())
    new RestClient(this).get(url, headers)

    def inputStream = connection.getInputStream()
    def jsonText = inputStream.getText()
    inputStream.close()
    def json = new JsonSlurperClassic().parseText(jsonText)
    test.each { module ->
        try {
            if ( json.find { it.id =~ module }) {
                def tmp = json.find { it.id =~ module }
                tmp['action']='disable'
                values.add(tmp)
            }
        } catch (Exception e) {
            println(e.getMessage())
        }
    }
    println(values)
} catch (Exception e) {
    println "Error: ${e.message}"
}

// ansiColor('xterm') {
//   node(params.AGENT) {
//     try {
//       stage('Ini') {
//         buildName "${namespace.getClusterName()}-${namespace.getNamespaceName()}.${env.BUILD_ID}"
//         buildDescription "Tenant: ${params.TENANT_ID}"
//       }
//       stage("Purge tenant modules") {
//         String fakeUrl = '{{host}}/_/proxy/tenants/supertenant/modules'
//         Map headers = new Authorization(this, "fakeUrl").getAuthorizedHeaders(namespace.getSuperTenant())
//         RestClient client = new RestClient(this, true)
//         def installJsonActual = client.get("${fakeUrl}", headers)
//         installJsonActual.find { it }
//       }
//     } catch (exception) {
//       println(exception)
//       error(exception.getMessage())
//     } finally {
//       stage('Cleanup') {
//         cleanWs notFailBuild: true
//       }
//     }
//   }
// }